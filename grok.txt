## Prompt

I am creating a Chrome extension that scrapes all of the jobs and job details from a website called Waterloo Works. I've already developed a solution that processes the large table of job IDs and links, extracting the job table and the information on the table. However, within the job table, each link, each href, is just javascript:void(0). This tells me that there's some internal JavaScript function that actually then calls the job information so that it shows up as a pop-up once you click the link. When I check out the network tab on Waterloo Works using Inspect Element, I see that when I click a link, there are two POST requests that occur. This tells me that there's some internal JavaScript function that actually then calls the job information so that it shows up as a pop-up once you click the link. See the attached TXT files for the headers, initiators, and other information about both of these POST requests. Attached are two files: post1.txt, detailing the first POST request which retrieves initial data from the server, and post2.txt, detailing the second POST request that captures the server's response, which is the content we aim to extract. When I click any href link in the table, 1 gets called, then 2. Find these files attached. Solving this is really, really important. Think as deeply as possible. Give me a detailed plan of action on how to approach this, how I should build my extension, what are some challenges I might run into, and what I should do specifically in broad steps. Keep your language simple and brief in response, but make sure you really deeply think about any and all potentialities and possibilities before giving your response.

## Grok information


function getPostingOverview(postingId, callback) {
  orbisApp.showLoadingOverlay();
  $.post("", {
      action: '_-_-2QI1KsiYud-Z9ks9slFTO8nUrquIuMV2w-H5lFQqKntAtemHp7Qfm-mkRmG__KTHrGBdrlCwVIZsbpaYYqoELpkvAOHxziClvGmYVoQ_pukhK3K74LZUBDwSJ0v-aWmogwvlit-cv-TwbIyUKpXf_lNz5EJ-SKq78F2_nbaNFmZlqLu2ZK3qXAJDnVvNL6YOB9gW_9B7PWMED4f9ynfiawrhimLofUyWn28WQBActkDTUA',
      postingId
  }, (data, status, xhr) => {
      orbisApp.hideLoadingOverlay();
      if (orbisAppSr.checkAjaxResponse(xhr)) {
          callback(data);
      }
  });
}

function getPostingData(postingId, callback) {
    orbisApp.showLoadingOverlay();
    $.post("", {
        action: '_-_-oAlis9MFiL9kdQ4ocrfcNbFf4FI6XH94zhNPJCb4ozX8Z3McR2MZQqaCnH_u8hpgQ0zc9kWmpXYuxlIPyGmwFAMxVkWzF2f38MJrBY65W6nFq3BPpLqu6XDxrMKrCe_VDhVgVAKhLB27j7xndLB9NA5k3QMeANGNj8-loc760KuL1z2xtRqbMlxU7FzoRLqq-1T00K_wu1gHzInvTW5ieEoLPyiAatjjo68',
        postingId
    }, (data, status, xhr) => {
        orbisApp.hideLoadingOverlay();
        if (orbisAppSr.checkAjaxResponse(xhr)) {
            callback(data);
        }
    }, "json");
}

using jQueryâ€™s $.post() method, these functions post request for the info. First, getPostingData posts, then getPostingOverview

Both action tokens are generated by the server and brought into the html dynamically, so the extension just has to scrape the html for these tokens and use them. 


